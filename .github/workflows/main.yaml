name: HRM CI/CD pipeline
on:
  push:
    branches:
    - release-mvp-0.6-123 # Trigger only on the release branch
  workflow_dispatch:
    # Enable manual triggering

jobs:
  image-build:
    runs-on: ubuntu-latest
    environment: dev
    strategy:
      matrix:
        service:
        - front-end # Add all microservice folder
    steps:
    # Step 1: Set up QEMU to enable cross-platform builds
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # Step 2: Set up Docker Buildx (for multi-architecture builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Checkout Code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 4: Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 5: Build Docker Image for ${{ matrix.service }}
    - name: Build Docker Image for ${{ matrix.service }}
      run: |
        cd ${{ matrix.service }}
        docker buildx build --platform linux/arm64 -t tracktwok/smart_hr_system:${{ matrix.service }} --push .
  # deploy-on-ec2:
  #   needs: image-build
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   strategy:
  #     matrix:
  #       service:
  #       - client-master # Match the services from the build job
  #   steps:
  #   # Step 1: Set up SSH to connect to the EC2 instance
  #   - name: Setup SSH
  #     uses: webfactory/ssh-agent@v0.5.3
  #     with:
  #       ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

  #   # Step 2: Deploy to EC2
  #   - name: Deploy Docker Containers on EC2
  #     env:
  #       SERVICE: ${{ matrix.service }}
  #     run: |
  #       ssh -o StrictHostKeyChecking=no \
  #       ubuntu@${{ secrets.EC2_HOST }} \
  #       "bash -c '
  #       export SERVICE=\"$SERVICE\"
  #       echo \"Remote SERVICE value: \$SERVICE\" 

  #       if [ -z \"\$SERVICE\" ]; then 
  #         echo \"Error: SERVICE variable is not set\"; 
  #         exit 1; 
  #       fi

  #       # Pull the latest Docker image
  #       docker pull tracktwok/smart_hr_system:\"\$SERVICE\"

  #       # Stop and remove any existing container
  #       docker rm -f \"\$SERVICE\" || true

  #       # Run the container
  #       docker run -d --name \"\$SERVICE\" -p 8009:8009 tracktwok/smart_hr_system:\"\$SERVICE\"
  #       '"
